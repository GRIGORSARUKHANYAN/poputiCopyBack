openapi: 3.0.0
info:
  title: My API
  description: API documentation for my project
  version: 1.0.0
servers:
  - url: http://localhost:3000/api
    description: Local server
paths:
  /auth/login:
    post:
      summary: User login
      tags:
       - auth
      description: Authenticate user and return JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@example.com
                password:
                  type: string
                  example: secret123
      responses:
        "200":
          description: Successfully logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        "401":
          description: Unauthorized
  /auth/register:
    post:
      summary: User register
      tags:
       - auth      
      description: Authenticate user 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@example.com
                password:
                  type: string
                  example: secret123
                role:
                  type: string
                  example: driver || student                  
      responses:
        "200":
          description: Successfully register in
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        "401":
          description: Unauthorized

  /user/personalInformation:
    post:
      summary: Upload user personal information
      tags:
       - user      
      description: Save personal information with different required fields based on user role
      security:
        - bearerAuth: []      
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - pasportImage
                - city
                - name
                - surname
                - pheneNumber
                - pasportData
                - birtday
                - gender
                - role
              properties:
                pasportImage:
                  type: string
                  format: binary
                  description: Passport image (file)
                city:
                  type: string
                  example: "Yerevan"
                name:
                  type: string
                  example: "Grigor"
                surname:
                  type: string
                  example: "Hakobyan"
                pheneNumber:
                  type: string
                  example: "+37499123456"
                pasportData:
                  type: string
                  example: "AB1234567"
                birtday:
                  type: string
                  format: date
                  example: "1995-06-15"
                gender:
                  type: string
                  enum: [male, female]
                  example: "male"
                role:
                  type: string
                  enum: [driver, student, user]
                  description: User role (determines additional fields)
                  example: "driver"
                driversLicenseImage:
                  type: string
                  format: binary
                  description: Driver's license image (required if role is 'driver')
                driversLicense:
                  type: string
                  description: Driver's license number (required if role is 'driver')
                  example: "DL12345678"
                university:
                  type: string
                  description: University name (required if role is 'student')
                  example: "Yerevan State University"
      responses:
        "200":
          description: Personal information successfully uploaded
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Personal information saved successfully"
        "400":
          description: Bad request (missing required fields)
        "401":
          description: Unauthorized (token missing or invalid)


  /user/{id}:
   get:
      summary: Get user by ID
      description: Fetches user details based on their unique ID
      tags:
       - user      
      security:
      - bearerAuth: []  
      parameters:
        - name: id
          in: path
          required: true
          description: The unique ID of the user
          schema:
            type: string
      responses:
        "200":
          description: Successfully retrieved user data
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  user:
                    type: object
                    example:
                      _id: "6527a1f2b3eabc0012345678"
                      name: "Grigor"
                      surname: "Hakobyan"
                      email: "grigor@example.com"
        "400":
          description: Invalid user ID format
        "404":
          description: User not found
          
  /updateProfilePhoto:
    post:
      summary: Update profile photo
      tags:
       - user      
      description: Upload and update the user's profile photo
      security:
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                profilePhoto:
                  type: string
                  format: binary
      responses:
        "200":
          description: Profile photo updated successfully
        "400":
          description: Profile photo is required
        "404":
          description: User not found          
  file/{id}:
   get:
     summary: Get a file by ID
     tags:
       - file     
     security:
      - bearerAuth: []  
     parameters:
       - in: path
         name: id
         required: true
         schema:
           type: string
         description: The ID of the file
     responses:
       200:
         description: File retrieved successfully
       404:
         description: File not found

   delete:
     summary: Delete a file by ID
     tags:
       - file     
     security:
      - bearerAuth: []  
     parameters:
       - in: path
         name: id
         required: true
         schema:
           type: string
         description: The ID of the file
     responses:
       200:
         description: File deleted successfully
       404:
         description: File not found        

  /car/{id}:
   get:
     summary: Get a car by ID
     tags:
       - Car
     security:
       - bearerAuth: []
     parameters:
       - in: path
         name: id
         required: true
         schema:
           type: string
         description: The ID of the car
     responses:
       200:
         description: Car retrieved successfully
       401:
         description: Unauthorized – invalid or missing token
       404:
         description: Car not found



   delete:
     summary: Delete a car by ID
     tags:
       - Car
     security:
       - bearerAuth: []
     parameters:
       - in: path
         name: id
         required: true
         schema:
           type: string
         description: The ID of the car to delete
     responses:
       200:
         description: Car deleted successfully
       401:
         description: Unauthorized – invalid or missing token
       404:
         description: Car not found

   post:
     summary: Create a new car
     tags:
       - Car
     security:
       - bearerAuth: []
     requestBody:
       required: true
       content:
         multipart/form-data:
           schema:
             type: object
             properties:
               make:
                 type: string
                 description: The make of the car
               model:
                 type: string
                 description: The model of the car
               year:
                 type: number
                 description: The manufacturing year of the car
               carImages:
                 type: array
                 items:
                   type: string
                   format: binary
                 description: Array of car image files
             required:
               - make
               - model
               - year
     responses:
       201:
         description: Car created successfully
       400:
         description: Bad request
       401:
         description: Unauthorized – invalid or missing token


  /journey/:
    post:
      summary: Create a journey
      description: Only authenticated users can create a journey
      tags:
       - journey
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                from:
                  type: string
                  example: Yerevan
                to:
                  type: string
                  example: Gyumri
                date:
                  type: string
                  format: date
                  example: 2025-04-15
                count:
                  type: number
                  example: 3
                car:
                  type: string
                  description: ObjectId of the car
                  example: 643f1b29e7b4d2a1a23b4567
              required:
                - from
                - to
                - date
                - count
                - car
      responses:
        "201":
          description: Journey successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Journey created
                  journeyId:
                    type: string
                    example: 64401b2ce9b7ab3456fffa22
        "401":
          description: Unauthorized
        "400":
          description: Bad Request         

    get:
      summary: Get all journeys
      description: Returns a list of all journeys (accessible to authenticated users)
      tags:
        - journey
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of journeys
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                      example: 643f1b29e7b4d2a1a23b4567
                    from:
                      type: string
                      example: Yerevan
                    to:
                      type: string
                      example: Gyumri
                    date:
                      type: string
                      format: date
                      example: 2025-04-15
                    count:
                      type: number
                      example: 3
                    car:
                      type: string
                      description: ObjectId of the car
                      example: 643a1b99f2aaed1234c9876f
        "401":
          description: Unauthorized      
  /journey/{id}:
    get:
      summary: Get journey by ID
      description: Returns a single journey by its ID (authenticated users only)
      tags:
        - journey
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the journey to retrieve
          schema:
            type: string
            example: 643f1b29e7b4d2a1a23b4567
      responses:
        "200":
          description: Journey found
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    example: 643f1b29e7b4d2a1a23b4567
                  from:
                    type: string
                    example: Yerevan
                  to:
                    type: string
                    example: Gyumri
                  date:
                    type: string
                    format: date
                    example: 2025-04-15
                  count:
                    type: number
                    example: 3
                  car:
                    type: string
                    example: 643a1b99f2aaed1234c9876f
        "404":
          description: Journey not found
        "401":
          description: Unauthorized            

    delete:
      summary: Delete a journey
      description: Deletes a journey by its ID (only for authenticated users, usually the creator)
      tags:
        - journey
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the journey to delete
          schema:
            type: string
            example: 643f1b29e7b4d2a1a23b4567
      responses:
        "200":
          description: Journey deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Journey deleted
        "404":
          description: Journey not found
        "401":
          description: Unauthorized
        "403":
          description: Forbidden (e.g. not the owner of the journey)

  /journey/joinJourney/{id}:
    put:
      summary: Join a journey
      description: Authenticated user joins a journey by its ID
      tags:
        - journey
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the journey to join
          schema:
            type: string
            example: 643f1b29e7b4d2a1a23b4567
      responses:
        "200":
          description: Successfully joined the journey
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Successfully joined the journey
                  journeyId:
                    type: string
                    example: 643f1b29e7b4d2a1a23b4567
        "400":
          description: Cannot join (e.g. already joined or
